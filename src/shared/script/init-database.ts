/**
 * Script d'initialisation de la base de donn√©es Sant√©Afrik
 * Ex√©cute le sch√©ma SQL complet et ins√®re les donn√©es initiales
 */

import { initializeDatabase, query, closeDatabase } from '../config/database';
import { readFileSync } from 'fs';
import { join } from 'path';

// Charger le sch√©ma SQL
const loadSQLSchema = (): string => {
  try {
    const schemaPath = join(__dirname, 'database.sql');
    return readFileSync(schemaPath, 'utf8');
  } catch (error) {
    console.error('‚ùå Erreur lors du chargement du sch√©ma SQL:', error);
    throw error;
  }
};

// Diviser le sch√©ma en requ√™tes ex√©cutables
const parseSQLQueries = (schema: string): string[] => {
  const queries: string[] = [];
  let currentQuery = '';
  let inBlock = false;
  let blockDelimiter = '';
  
  const lines = schema.split('\n');
  
  for (const line of lines) {
    const trimmedLine = line.trim();
    
    // Ignorer les commentaires et lignes vides
    if (trimmedLine.startsWith('--') || trimmedLine === '') {
      continue;
    }
    
    // D√©tecter le d√©but d'un bloc DO $$
    if (trimmedLine.startsWith('DO $$')) {
      inBlock = true;
      blockDelimiter = '$$';
      currentQuery = trimmedLine;
      continue;
    }
    
    // D√©tecter la fin d'un bloc DO $$
    if (inBlock && trimmedLine.includes('$$')) {
      currentQuery += '\n' + trimmedLine;
      if (currentQuery.trim()) {
        queries.push(currentQuery.trim());
      }
      currentQuery = '';
      inBlock = false;
      blockDelimiter = '';
      continue;
    }
    
    // Si on est dans un bloc, ajouter la ligne
    if (inBlock) {
      currentQuery += '\n' + trimmedLine;
      continue;
    }
    
    // D√©tecter la fin d'une requ√™te normale (point-virgule)
    if (trimmedLine.endsWith(';')) {
      currentQuery += '\n' + trimmedLine;
      if (currentQuery.trim()) {
        queries.push(currentQuery.trim());
      }
      currentQuery = '';
    } else {
      currentQuery += '\n' + trimmedLine;
    }
  }
  
  // Ajouter la derni√®re requ√™te si elle existe
  if (currentQuery.trim()) {
    queries.push(currentQuery.trim());
  }
  
  return queries.filter(q => q.trim().length > 0);
};

// Ex√©cuter le sch√©ma SQL
const executeSchema = async (): Promise<void> => {
  try {
    console.log('üîß Ex√©cution du sch√©ma SQL...');
    
    const schema = loadSQLSchema();
    const queries = parseSQLQueries(schema);
    
    console.log(`üìù ${queries.length} requ√™tes SQL √† ex√©cuter`);
    
    for (let i = 0; i < queries.length; i++) {
      const queryText = queries[i];
      try {
        await query(queryText);
        console.log(`‚úÖ Requ√™te ${i + 1}/${queries.length} ex√©cut√©e`);
      } catch (error: any) {
        // Ignorer les erreurs de tables d√©j√† existantes
        if (error.code === '42P07') {
          console.log(`‚ö†Ô∏è Table d√©j√† existante (requ√™te ${i + 1}/${queries.length})`);
        } else {
          console.error(`‚ùå Erreur requ√™te ${i + 1}/${queries.length}:`, error.message);
          // Continuer avec les autres requ√™tes
        }
      }
    }
    
    console.log('‚úÖ Sch√©ma SQL ex√©cut√© avec succ√®s');
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'ex√©cution du sch√©ma:', error);
    throw error;
  }
};

// V√©rifier que les tables ont √©t√© cr√©√©es
const verifyTables = async (): Promise<void> => {
  try {
    console.log('üîç V√©rification des tables cr√©√©es...');
    
    const result = await query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
      ORDER BY table_name
    `);
    
    console.log('üìã Tables cr√©√©es:');
    result.rows.forEach((row: any) => {
      console.log(`   - ${row.table_name}`);
    });
    
    console.log(`‚úÖ ${result.rows.length} tables cr√©√©es avec succ√®s`);
  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification des tables:', error);
    throw error;
  }
};

// V√©rifier les donn√©es initiales
const verifyInitialData = async (): Promise<void> => {
  try {
    console.log('üîç V√©rification des donn√©es initiales...');
    
    // V√©rifier les r√¥les
    try {
      const roles = await query('SELECT COUNT(*) as count FROM role');
      console.log(`   - R√¥les: ${roles.rows[0].count}`);
    } catch (error) {
      console.log('   - R√¥les: Table non cr√©√©e');
    }
    
    // V√©rifier les permissions
    try {
      const permissions = await query('SELECT COUNT(*) as count FROM permission');
      console.log(`   - Permissions: ${permissions.rows[0].count}`);
    } catch (error) {
      console.log('   - Permissions: Table non cr√©√©e');
    }
    
    // V√©rifier les sp√©cialit√©s
    try {
      const specialites = await query('SELECT COUNT(*) as count FROM specialite');
      console.log(`   - Sp√©cialit√©s: ${specialites.rows[0].count}`);
    } catch (error) {
      console.log('   - Sp√©cialit√©s: Table non cr√©√©e');
    }
    
    console.log('‚úÖ Donn√©es initiales v√©rifi√©es');
  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification des donn√©es:', error);
    throw error;
  }
};

// Fonction principale
const main = async (): Promise<void> => {
  try {
    console.log('üöÄ Initialisation de la base de donn√©es Sant√©Afrik');
    console.log('================================================');
    
    // Initialiser la connexion
    initializeDatabase();
    
    // Ex√©cuter le sch√©ma
    await executeSchema();
    
    // V√©rifier les tables
    await verifyTables();
    
    // V√©rifier les donn√©es initiales
    await verifyInitialData();
    
    console.log('\nüéâ Base de donn√©es initialis√©e avec succ√®s !');
    console.log('‚úÖ Toutes les tables et donn√©es initiales sont en place');
    
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'initialisation:', error);
    process.exit(1);
  } finally {
    // Fermer la connexion
    await closeDatabase();
  }
};

// Ex√©cuter si appel√© directement
if (require.main === module) {
  main().catch(console.error);
}

export default main;
